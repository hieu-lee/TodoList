@page "/"
@using TodoList.Models;
@inject ListsService listsService
@inject SessionsService sessionsService
@inject NotificationService notificationService
@inject NavigationManager navigationManager

<h1 style="text-align: center;">Welcome @sessionsService.session.username to Todo List</h1>
<div>
    <div style="display: flex; justify-content: space-between;">
        <div style="display: flex;">
            <MudTooltip Text="Add new list">
                <img @onclick="AddNewList" style="width: 30px; height: 30px; margin-left: 12px; margin-top: 10px; cursor: pointer;" src="addlist.png" />
            </MudTooltip>
            <MudTextField T="string" FullWidth="true" Placeholder="New Title" @bind-Value="@NewName" Style="margin: 0 10px;"></MudTextField>
        </div>
    </div>
</div>
<hr />
<ul>
    @foreach (var list in MySortedLists)
    {
        <li>
            <div style="display: flex; justify-content: space-between">
                <div style="display: flex;">
                    <div>
                        <img @onclick="() => { ManageList(list); }" class="list-pic" src="todolist.png" />
                    </div>
                    <div>
                        <h4>@list.Name</h4>
                        <small>Last updated: @list.TimeCreate.ToString()</small>
                    </div>
                </div>
                <div>
                    <img @onclick="() => { ShowMore(list); }" src="more.png" style="width: 30px; height: 30px; cursor: pointer;" />
                </div>
            </div>
            <div @onclick="async () => { await DeleteListAsync(list); }" style="background-color: red; text-align: center; height: @list.DeleteHeight; transition: height 0.5s; cursor: pointer;">
                <img style="width: 30px; height: 30px;" src="trash.png" />
            </div>
            <hr />
        </li>
    }
</ul>
<MudScrollToTop>
    <MudFab Color="Color.Primary" Icon="@Icons.Filled.ArrowUpward" />
</MudScrollToTop>


@code {
    string NewName = string.Empty;
    string username;
    SortedSet<ToDoList> MySortedLists = new();

    protected override async Task OnInitializedAsync()
    {
        if (sessionsService.session.logged)
        {
            username = sessionsService.session.username;
            var res = await listsService.GetListsAsync(username);
            if (res.success)
            {
                MySortedLists = res.lists;
                return;
            }
            else
            {
                navigationManager.NavigateTo("/log");
            }
        }
        navigationManager.NavigateTo("/log");

    }

    private async Task AddNewList()
    {
        if (string.IsNullOrWhiteSpace(NewName))
        {
            return;
        }
        NewName = NewName.Trim();
        ToDoList NewList = new() { Owner = new() { username = sessionsService.session.username }, Name = NewName };
        MySortedLists.Add(NewList);
        await listsService.CreateNewListAsync(sessionsService.session.username, NewList);
        NewName = string.Empty;
    }

    private void ManageList(ToDoList list)
    {
        navigationManager.NavigateTo($"/list/{list.ListId}");
    }

    private void ShowMore(ToDoList list)
    {
        if (list.DeleteHeight == "0")
        {
            list.DeleteHeight = "30px";
        }
        else
        {
            list.DeleteHeight = "0";
        }
    }

    private async Task DeleteListAsync(ToDoList list)
    {
        MySortedLists.Remove(list);
        await listsService.DeleteListAsync(username, list.ListId);
    }
}
